{"version":3,"sources":["image/giphyLoad.gif","components/Header.js","components/Footer.js","components/Form.js","components/Results.js","components/History.js","components/Home.js","components/Help.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","data-testid","activeClassName","to","Footer","Form","useState","request","setRequest","useEffect","method","url","data","JSON","stringify","handleSubmit","event","a","preventDefault","handler","changeMethod","onSubmit","type","placeholder","defaultValue","onChange","target","value","onClick","name","parse","error","Results","loading","src","alt","headers","results","History","calls","Object","keys","map","key","apiCall","HomePage","updateResults","setState","updateRequest","toggleLoading","state","fetchResults","axios","response","console","log","updateHistory","history","hash","md5","this","localStorage","setItem","getItem","React","Component","Help","Main","exact","path","Home","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a4e1ebe4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/giphyLoad.33ccf91b.gif\";","import React from 'react';\nimport { NavLink } from 'react-router-dom';\nimport './header.scss';\n\nconst Header = props => {\n\n  return (\n  <header className=\"App-header\">\n    <h1>RESTy</h1>\n    <nav>\n      <ul>\n        <li>\n        <NavLink data-testid=\"homelink\" activeClassName=\"here\" to=\"/\">Home</NavLink>\n        </li>\n        <li>\n          <NavLink data-testid=\"classiclink\" activeClassName=\"here\" to=\"/history\">History</NavLink>\n        </li>\n        <li>\n          <NavLink data-testid=\"renderlink\" activeClassName=\"here\" to=\"/help\">Help</NavLink>\n        </li>\n      </ul>\n    </nav>\n  </header>);\n}\n\nexport default Header;","import React from 'react';\nimport './footer.scss';\n\nfunction Footer(){ \n  return(<footer>\n  &copy; 2020 Code Fellows\n  </footer>\n  );\n}\n\nexport default Footer;","import React, {useState, useEffect} from 'react';\nimport './form.scss';\n\nfunction Form (props) {\n\n  const [request, setRequest] = useState({});\n\n  useEffect(()=>{\n    const method = props.request.method || 'get';\n    const url = props.request.url || '';\n    const data = props.request.data ? JSON.stringify(props.request.data) : '';\n    setRequest({ method, url,data});\n  }, [props, setRequest]);\n\n  const handleSubmit = async event =>{\n    event.preventDefault();\n    props.handler(request);\n  }\n\n  const changeUrl = event => {\n    let url = event.target.value;\n    setRequest({ ...request, url});\n  }\n\n  const changeBody = event =>{\n    try {\n      let data = JSON.parse(event.target.value);\n      setRequest({...request, data});\n    }\n    catch (error){}\n  };\n\n  const changeMethod = method =>{\n    setRequest({ ...request, method});\n\n  }\n\n  \n    return (\n    <form className=\"FormRender\" onSubmit={handleSubmit}>\n    <div className=\"url\">\n      \n      <h3>URL: <input type=\"text\" placeholder=\"url\" defaultValue={request.url} onChange={changeUrl} />\n      <button className=\"goButton\">GO!</button>\n      </h3>\n    </div>\n\n    <div className=\"verbs\">\n      <span className={`method ${request.method === 'get'}`} onClick={() => changeMethod('get')}>GET</span>\n      <span className={`method ${request.method === 'post'}`} onClick={() => changeMethod('post')}>POST</span>\n      <span className={`method ${request.method === 'put'}`} onClick={() => changeMethod('put')}>PUT</span>\n      <span className={`method ${request.method === 'delete'}`} onClick={() => changeMethod('delete')}>DELETE</span>\n\n      <textarea className=\"textArea\" name=\"data\" onChange={changeBody} defaultValue={request.data}/>\n    </div>\n    <hr></hr>\n    </form>\n    \n  );\n  \n}\n\nexport default Form;","import React from 'react';\nimport './results.scss';\nimport JSONPretty from 'react-json-pretty';\nimport loading from '../image/giphyLoad.gif';\n\nconst Results = (props) =>{\n\n  return(\n    \n    <section className=\"contentArea\">\n      {\n        props.loading ? (\n        <div className=\"loading\">\n          <img src={loading} alt=\"Loading\"/>\n        </div>\n        ) :(\n          <>\n              <h3>Headers</h3>\n              <JSONPretty data={props.headers}></JSONPretty>\n    \n              <h3>Results</h3>\n              <JSONPretty data={props.results}></JSONPretty>\n              </>\n            )\n      }\n\n    </section>\n  )\n\n}\n\n// function resultsData(props){\n//     if(props.resultsData){\n//       return (\n//       <>\n//           <h3>Headers</h3>\n//           <JSONPretty data={props.headers}></JSONPretty>\n\n//           <h3>Results</h3>\n//           <JSONPretty data={props.results}></JSONPretty>\n//           </>\n//         );\n//       }  \n// }\n\n\nexport default Results;","import React from 'react';\nimport './history.scss';\nimport '../app.scss';\n\n\nfunction History(props){\n  const calls = props.calls || {};\n\n  function loadRequest(apiCall){\n    props.handler(apiCall);\n  }\n \n\n  return(\n    <div className=\"history\">\n      <ul>\n        {\n          Object.keys(calls).map(key =>\n          <li key={key}>\n            <span className={`method ${props.calls[key].method}`}>{props.calls[key].method}</span>\n            <button onClick={()=>\n              loadRequest(props.calls[key])}>{props.calls[key].url}</button>\n\n          </li>,\n            \n          )\n        }\n      </ul>\n    </div>\n  );\n}\n\nexport default History;","import React from 'react';\nimport axios from 'axios';\nimport md5 from 'md5';\n\nimport Form from './Form';\nimport Results from './Results';\nimport History from './History';\n\nimport '../app.scss';\n\nclass HomePage extends React.Component {\n \n  constructor(props){\n    super(props);\n    this.state = {\n      loading: false,\n      // results:[],\n      request: {},\n      history: {},\n    };\n  }\n\n  updateResults = (headers, results) =>{\n    this.setState({headers, results});\n  };\n\n  updateRequest = (request) =>{\n    this.setState({request});\n  };\n\n  toggleLoading = () =>{\n    this.setState({loading: !this.state.loading});\n  };\n\n  updateHistory(request){\n    let hash = md5(JSON.stringify(request));\n\n    const history = { ...this.state.history, [hash]: request}\n\n    this.setState({history}, ()=>{\n      localStorage.setItem('history', JSON.stringify(this.state,history));\n    });\n  }\n\n  componentDidMount() {\n    let history = JSON.parse(localStorage.getItem('history'));\n    this.setState({ history });\n  }\n\n  fetchResults = async(request)=>{\n    try{\n\n      this.toggleLoading();\n      this.updateRequest(request);\n      let response = await axios(request);\n      console.log('this is the request', request);\n      this.toggleLoading();\n\n      this.updateHistory(request);\n      this.updateResults(response.headers, response.data);\n    }\n    catch (error){\n      console.log(error);\n    }\n  }\n\n\n  render(){\n  return (\n    \n    <>\n   \n    <Form request={this.state.request} handler={this.fetchResults}/>\n    <main>\n    <History handler={this.updateRequest} calls={this.state.history}/>\n\n    {\n      this.state.results &&\n      <Results loading={this.state.loading} headers={this.state.headers} results={this.state.results}/>\n\n    }\n   \n    </main>\n  \n    </>\n    \n  );\n  }\n}\n\nexport default HomePage;","import { queryHelpers } from '@testing-library/react';\nimport React from 'react';\n\nconst Help = props => {\n\n  return(\n    <main>\n      <h3>How to use the app?</h3>\n      <p>Enter an url API and select the method you wish to perform on that url. Click GO! And the results will render on the page. </p>\n    </main>\n  )\n}\n\nexport default Help;","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\n\nimport Home from './Home.js';\nimport Help from './Help.js';\nimport History from './History.js';\n\nconst Main = props =>{\n\n  return(\n    <>\n      <Switch>\n\n        <Route exact path=\"/\">\n          <Home />\n        </Route>\n        <Route exact path=\"/history\">\n          <History />\n        </Route>\n        <Route exact path=\"/help\">\n          <Help />\n        </Route>\n        \n\n      </Switch>\n    </>\n  )\n}\n\nexport default Main;","import React from 'react';\n// import axios from 'axios';\n// import md5 from 'md5';\n\nimport { BrowserRouter, MemoryRouter, HashRouter } from 'react-router-dom';\n\nimport './app.scss';\n\nimport Header from './components/Header';\n\nimport Footer from './components/Footer';\n// import History from './components/History';\nimport Main from './components/Main';\n\nclass App extends React.Component {\n \n  // constructor(props){\n  //   super(props);\n  //   this.state = {\n  //     loading: false,\n  //     // results:[],\n  //     request: {},\n  //     history: {},\n  //   };\n  // }\n\n  // updateResults = (headers, results) =>{\n  //   this.setState({headers, results});\n  // };\n\n  // updateRequest = (request) =>{\n  //   this.setState({request});\n  // };\n\n  // toggleLoading = () =>{\n  //   this.setState({loading: !this.state.loading});\n  // };\n\n  // updateHistory(request){\n  //   let hash = md5(JSON.stringify(request));\n\n  //   const history = { ...this.state.history, [hash]: request}\n\n  //   this.setState({history}, ()=>{\n  //     localStorage.setItem('history', JSON.stringify(this.state,history));\n  //   });\n  // }\n\n  // componentDidMount() {\n  //   let history = JSON.parse(localStorage.getItem('history'));\n  //   this.setState({ history });\n  // }\n\n  // fetchResults = async(request)=>{\n  //   try{\n\n  //     this.toggleLoading();\n  //     this.updateRequest(request);\n  //     let response = await axios(request);\n  //     console.log('this is the request', request);\n  //     this.toggleLoading();\n\n  //     this.updateHistory(request);\n  //     this.updateResults(response.headers, response.data);\n  //   }\n  //   catch (error){\n  //     console.log(error);\n  //   }\n  // }\n\n\n  render(){\n  return (\n    <BrowserRouter>\n    <div className=\"App\">\n    <Header />\n    \n   \n    <Main />\n   \n    \n    <Footer />\n    </div>\n    </BrowserRouter>\n  );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}